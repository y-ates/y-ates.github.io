<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>research on Yakup Ates</title>
    <link>https://y-ates.github.io/tags/research/</link>
    <description>Recent content in research on Yakup Ates</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Dec 2020 20:04:04 +0100</lastBuildDate><atom:link href="https://y-ates.github.io/tags/research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Researching IT-Security!</title>
      <link>https://y-ates.github.io/secresearch/</link>
      <pubDate>Sun, 13 Dec 2020 20:04:04 +0100</pubDate>
      
      <guid>https://y-ates.github.io/secresearch/</guid>
      <description>XSS Polyglots In the following I want to introduce several so called &amp;ldquo;XSS Polyglots&amp;rdquo;. A XSS polyglot is an XSS attack vector which is able to execute in various contexts. Thus, one can inject less attack vectors, get a lot of attack surface covered and analyze the behavior of the application using less requests. Furthermore, as it covers several attack vectors in one, the probability to develop a successful attack vector increases.</description>
    </item>
    
    <item>
      <title>XSS Polyglots</title>
      <link>https://y-ates.github.io/secresearch/xss_polyglots/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0200</pubDate>
      
      <guid>https://y-ates.github.io/secresearch/xss_polyglots/</guid>
      <description>In the following I want to introduce several so called &amp;ldquo;XSS Polyglots&amp;rdquo;. A XSS polyglot is an XSS attack vector which is able to execute in various contexts. Thus, one can inject less attack vectors, get a lot of attack surface covered and analyze the behavior of the application using less requests. Furthermore, as it covers several attack vectors in one, the probability to develop a successful attack vector increases. Another reason to use a XSS polyglot is to bypass the Content-Security-Policy (CSP), which is an added security layer for XSS detection and mitigation, provided by the browser.</description>
    </item>
    
    <item>
      <title>Creating custom wordlists</title>
      <link>https://y-ates.github.io/secresearch/custom_wordlist_generation/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0200</pubDate>
      
      <guid>https://y-ates.github.io/secresearch/custom_wordlist_generation/</guid>
      <description>A brute-force attack on passwords/usernames using a custom generated wordlist can be way more efficient than to use some standard wordfiles like for example the famous &amp;ldquo;rockyou.txt&amp;rdquo;. In the following I will share a technique to generate your own custom wordlist.
First of all, you should gather some information about your target and analyze it. You are looking for most used words, hobbies and anything that your target could use in his password.</description>
    </item>
    
    <item>
      <title>DOM-Clobbering</title>
      <link>https://y-ates.github.io/secresearch/domclobbering/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0200</pubDate>
      
      <guid>https://y-ates.github.io/secresearch/domclobbering/</guid>
      <description>test</description>
    </item>
    
    <item>
      <title>Serialized Objects</title>
      <link>https://y-ates.github.io/secresearch/serialized_objects/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0200</pubDate>
      
      <guid>https://y-ates.github.io/secresearch/serialized_objects/</guid>
      <description>Object serialization is an important aspect of any non-trivial program. When running around through the jungle one easily encounters these types of files.
As serialized files will get deserialized at some but by the application an interesting vulnerability comes into mind Insecure Object Deserialization. An Insecure Object Deserialization occurs when an application attempts to deserialize untrusted data. Without experience it can get pretty tricky to detect serialized files and thus one might overlook this type of vulnerability.</description>
    </item>
    
  </channel>
</rss>
